openapi: 3.0.2
info:
  title: Edge Normalization Service
  description: 'The <a href="https://biolink.github.io/biolink-model/">Biolink Model</a> defines allowed predicates in the Translator ecosystem.  Ingesting data from arbitrary sources requires mapping predicates in those sources to Translator predicates.
<p/>
The <a href="https://bl-lookup-sri.renci.org/apidocs">Biolink Lookup Service</a> can find predicates if they have an exact mapping in the model.  The EdgeNormalization service takes this a step further, and attempts to find the best match to a Biolink predicate, even if there is not an explicit mapping.
'
  version: '1.0.0'
  contact:
    email: bizon@renci.org
    name: Chris Bizon
    x-id: https://github.com/cbizon
    x-role: responsible developer
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  termsOfService: http://robokop.renci.org:7055/tos?service_long=Edge+Normalization&provider_long=the+Translator+Consortium
  x-translator:
    component: Utility
    team:
      - Standards Reference Implementation Team
tags:
  - name: translator
servers:
  - description: Default server
    url: https://edgenormalization-sri.renci.org/apidocs/
paths:
  /resolve_predicate:
    get:
      tags:
        - redis
      summary: 'Resolve predicate CURIE(s) into Biolink model compliant counterpart(s), first checking the BioLink model for
      exact matches of a CURIE.  If the CURIE is from the Relation Ontology, the service will check its superproperties until
       an exact match is found.'
      description: 'Get Biolink model compliant predicate(s) using the passed predicate(s).'
      parameters:
        - in: query
          name: predicate
          schema:
            type: array
            items:
              type: string
            example:
              - SEMMEDDB:CAUSES
              - RO:0000052
        - in: query
          name: version
          schema:
            type: string
            example: "latest"
      responses:
        '200':
          description: Results
          content:
            application/json:
              schema:
                type: object
                example:
                  "SEMMEDDB:CAUSES":
                    "identifier": "RO:0002410"
                    "label": "causes"
                  "RO:0000052":
                    "identifier": "SEMMEDDB:AFFECTS"
                    "label": "affects"
